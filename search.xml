<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS1</title>
    <url>/yanwugit.github.io/2020/05/07/CSS1/</url>
    <content><![CDATA[<p>Git是一个由林纳斯·托瓦兹为了更好地管理linux内核开发而创立的分布式版本控制，软件配置管理软件。需要注意的是和GNU Interactive Tools，一个类似Norton Commander界面的文件管理器相区分。Git最初的开发动力来自于BitKeeper和Monotone。Git最初只是作为一个可以被其他前端比如Cogito或StGIT包装的后端而开发的。不过，后来Git内核已经成熟到可以独立地用作版本控制。</p>
<h1 id="一-配置ssh"><a href="#一-配置ssh" class="headerlink" title="一.配置ssh"></a>一.配置ssh</h1><h2 id="1-检查本机是否有ssh-key设置"><a href="#1-检查本机是否有ssh-key设置" class="headerlink" title="1.检查本机是否有ssh key设置"></a>1.检查本机是否有ssh key设置</h2><p>如果没有则提示： No such file or directory<br>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm删除所有文件）</p>
<h2 id="2-使用Git-Bash生成新的ssh-key"><a href="#2-使用Git-Bash生成新的ssh-key" class="headerlink" title="2.使用Git Bash生成新的ssh key"></a>2.使用Git Bash生成新的ssh key</h2><p>$ cd ~ #保证当前路径在”~”下<br>$ ssh-keygen -t rsa -C “<a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a>“  #建议填写自己真实有效的邮箱地址<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车<br>Enter passphrase (empty for no passphrase):   #输入密码（可以为空）<br>Enter same passphrase again:   #再次确认密码（可以为空）<br>Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥<br>Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. #生成的公钥<br>The key fingerprint is:<br>e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 <a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a><br>//本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。<br>//可生成ssh key自定义名称的密钥，默认id_rsa。<br>$ ssh-keygen -t rsa -C “邮箱地址” -f ~/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</p>
<h2 id="3-添加ssh-key到GItHub"><a href="#3-添加ssh-key到GItHub" class="headerlink" title="3.添加ssh key到GItHub"></a>3.添加ssh key到GItHub</h2><h3 id="3-1-登录GitHub系统；"><a href="#3-1-登录GitHub系统；" class="headerlink" title="3.1 登录GitHub系统；"></a>3.1 登录GitHub系统；</h3><p>点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。</p>
<h3 id="3-2-复制id-rsa-pub的公钥内容"><a href="#3-2-复制id-rsa-pub的公钥内容" class="headerlink" title="3.2 复制id_rsa.pub的公钥内容"></a>3.2 复制id_rsa.pub的公钥内容</h3><p>进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。<br>Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“AddKey”。</p>
<h2 id="4-配置账户"><a href="#4-配置账户" class="headerlink" title="4.配置账户"></a>4.配置账户</h2><pre><code class="Ruby"># 设置用户名
$ git config --global user.name “your_username”

# 设置邮箱地址(建议用注册giuhub的邮箱)
$ git config --global user.email “your_registered_github_Email” </code></pre>
<h2 id="5-测试ssh-keys是否设置成功"><a href="#5-测试ssh-keys是否设置成功" class="headerlink" title="5.测试ssh keys是否设置成功"></a>5.测试ssh keys是否设置成功</h2><p>$ ssh -T <a href="mailto:git@github.com">git@github.com</a><br>The authenticity of host ‘github.com(192.30.252.129)’ can’t be established.<br>RSA key fingerprint is16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.<br>Are you sure you want to continueconnecting (yes/no)? yes #确认你是否继续联系，输入yes<br>Warning: Permanently added’github.com,192.30.252.129’ (RSA) to the list of known hosts.<br>Enter passphrase for key’/c/Users/xxxx_000/.ssh/id_rsa’: #生成sshkye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。<br>Hi xxx! You’ve successfullyauthenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</p>
<h1 id="二、Github新建项目"><a href="#二、Github新建项目" class="headerlink" title="二、Github新建项目"></a>二、Github新建项目</h1><h2 id="1-Github新建项目"><a href="#1-Github新建项目" class="headerlink" title="1.Github新建项目"></a>1.Github新建项目</h2><h2 id="2-注意项目名（必须是：github的用户名-github-io）"><a href="#2-注意项目名（必须是：github的用户名-github-io）" class="headerlink" title="2.注意项目名（必须是：github的用户名.github.io）"></a>2.注意项目名（必须是：github的用户名.github.io）</h2><h2 id="3-clone项目地址"><a href="#3-clone项目地址" class="headerlink" title="3.clone项目地址"></a>3.clone项目地址</h2><h2 id="4-将项目clone到本地"><a href="#4-将项目clone到本地" class="headerlink" title="4.将项目clone到本地"></a>4.将项目clone到本地</h2><p>然后输入命令，回车，等待clone完成。</p>
<h2 id="5-将index-html推送到远程github仓库中"><a href="#5-将index-html推送到远程github仓库中" class="headerlink" title="5.将index.html推送到远程github仓库中"></a>5.将index.html推送到远程github仓库中</h2><p>git add .<br>git commit -m “这里是注释信息，自己写”<br>git push origin master<br>写在最后<br>github配置好了，就可以本地新建git项目，然后上传到github上了。<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>11111</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS2</title>
    <url>/yanwugit.github.io/2020/08/07/CSS2/</url>
    <content><![CDATA[<p>eeeeeeeeeeeeeeeeeeeeeeee<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>22222</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/yanwugit.github.io/2001/12/07/CSS3/</url>
    <content><![CDATA[<p>ddddddddddddddddddddddddddd<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/yanwugit.github.io/2001/05/07/arwwrwerwtg/</url>
    <content><![CDATA[<p>ddddddddddddddddddddddddddd<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>vue1</title>
    <url>/yanwugit.github.io/2001/01/08/dsgfsg/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>introduction</title>
    <url>/yanwugit.github.io/2020/08/20/introduction/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>js1</title>
    <url>/yanwugit.github.io/2001/06/08/js1/</url>
    <content><![CDATA[<p>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br>eeeeeeeeeeeeeeeeeeeeeeee<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>CSS2</title>
    <url>/yanwugit.github.io/2001/07/07/rerwedsgfxcvxbvb/</url>
    <content><![CDATA[<p>eeeeeeeeeeeeeeeeeeeeeeee<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>22222</tag>
      </tags>
  </entry>
  <entry>
    <title>js1</title>
    <url>/yanwugit.github.io/2001/06/08/wetwetwt/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>vue1</title>
    <url>/yanwugit.github.io/2007/05/08/vue1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>CSS1</title>
    <url>/yanwugit.github.io/2020/05/07/xxxx/</url>
    <content><![CDATA[<p>Git是一个由林纳斯·托瓦兹为了更好地管理linux内核开发而创立的分布式版本控制，软件配置管理软件。需要注意的是和GNU Interactive Tools，一个类似Norton Commander界面的文件管理器相区分。Git最初的开发动力来自于BitKeeper和Monotone。Git最初只是作为一个可以被其他前端比如Cogito或StGIT包装的后端而开发的。不过，后来Git内核已经成熟到可以独立地用作版本控制。</p>
<h1 id="一-配置ssh"><a href="#一-配置ssh" class="headerlink" title="一.配置ssh"></a>一.配置ssh</h1><h2 id="1-检查本机是否有ssh-key设置"><a href="#1-检查本机是否有ssh-key设置" class="headerlink" title="1.检查本机是否有ssh key设置"></a>1.检查本机是否有ssh key设置</h2><p>如果没有则提示： No such file or directory<br>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm删除所有文件）</p>
<h2 id="2-使用Git-Bash生成新的ssh-key"><a href="#2-使用Git-Bash生成新的ssh-key" class="headerlink" title="2.使用Git Bash生成新的ssh key"></a>2.使用Git Bash生成新的ssh key</h2><p>$ cd ~ #保证当前路径在”~”下<br>$ ssh-keygen -t rsa -C “<a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a>“  #建议填写自己真实有效的邮箱地址<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车<br>Enter passphrase (empty for no passphrase):   #输入密码（可以为空）<br>Enter same passphrase again:   #再次确认密码（可以为空）<br>Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥<br>Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. #生成的公钥<br>The key fingerprint is:<br>e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 <a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a><br>//本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。<br>//可生成ssh key自定义名称的密钥，默认id_rsa。<br>$ ssh-keygen -t rsa -C “邮箱地址” -f ~/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</p>
<h2 id="3-添加ssh-key到GItHub"><a href="#3-添加ssh-key到GItHub" class="headerlink" title="3.添加ssh key到GItHub"></a>3.添加ssh key到GItHub</h2><h3 id="3-1-登录GitHub系统；"><a href="#3-1-登录GitHub系统；" class="headerlink" title="3.1 登录GitHub系统；"></a>3.1 登录GitHub系统；</h3><p>点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。</p>
<h3 id="3-2-复制id-rsa-pub的公钥内容"><a href="#3-2-复制id-rsa-pub的公钥内容" class="headerlink" title="3.2 复制id_rsa.pub的公钥内容"></a>3.2 复制id_rsa.pub的公钥内容</h3><p>进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。<br>Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“AddKey”。</p>
<h2 id="4-配置账户"><a href="#4-配置账户" class="headerlink" title="4.配置账户"></a>4.配置账户</h2><pre><code class="Ruby"># 设置用户名
$ git config --global user.name “your_username”

# 设置邮箱地址(建议用注册giuhub的邮箱)
$ git config --global user.email “your_registered_github_Email” </code></pre>
<h2 id="5-测试ssh-keys是否设置成功"><a href="#5-测试ssh-keys是否设置成功" class="headerlink" title="5.测试ssh keys是否设置成功"></a>5.测试ssh keys是否设置成功</h2><p>$ ssh -T <a href="mailto:git@github.com">git@github.com</a><br>The authenticity of host ‘github.com(192.30.252.129)’ can’t be established.<br>RSA key fingerprint is16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.<br>Are you sure you want to continueconnecting (yes/no)? yes #确认你是否继续联系，输入yes<br>Warning: Permanently added’github.com,192.30.252.129’ (RSA) to the list of known hosts.<br>Enter passphrase for key’/c/Users/xxxx_000/.ssh/id_rsa’: #生成sshkye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。<br>Hi xxx! You’ve successfullyauthenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</p>
<h1 id="二、Github新建项目"><a href="#二、Github新建项目" class="headerlink" title="二、Github新建项目"></a>二、Github新建项目</h1><h2 id="1-Github新建项目"><a href="#1-Github新建项目" class="headerlink" title="1.Github新建项目"></a>1.Github新建项目</h2><h2 id="2-注意项目名（必须是：github的用户名-github-io）"><a href="#2-注意项目名（必须是：github的用户名-github-io）" class="headerlink" title="2.注意项目名（必须是：github的用户名.github.io）"></a>2.注意项目名（必须是：github的用户名.github.io）</h2><h2 id="3-clone项目地址"><a href="#3-clone项目地址" class="headerlink" title="3.clone项目地址"></a>3.clone项目地址</h2><h2 id="4-将项目clone到本地"><a href="#4-将项目clone到本地" class="headerlink" title="4.将项目clone到本地"></a>4.将项目clone到本地</h2><p>然后输入命令，回车，等待clone完成。</p>
<h2 id="5-将index-html推送到远程github仓库中"><a href="#5-将index-html推送到远程github仓库中" class="headerlink" title="5.将index.html推送到远程github仓库中"></a>5.将index.html推送到远程github仓库中</h2><p>git add .<br>git commit -m “这里是注释信息，自己写”<br>git push origin master<br>写在最后<br>github配置好了，就可以本地新建git项目，然后上传到github上了。<br> <a id="more"></a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>11111</tag>
      </tags>
  </entry>
</search>
